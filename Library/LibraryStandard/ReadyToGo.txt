* look at the requirements and review every method and its goal
* find relations methods
* find the relations between the classes
* 

* Library App 
 - Enable to work with catalog of books 

* Components of the library App ? 
 - Books 
 - People | Cust | Librarian 
 - State of library | tracking books/people | save/load data 


 ** Books 
  - Book 

**  People
  - Author 
  - Librarian
  - Customer

** State of library
  - Catalog             // enables persons to work, view and edit books
  - LoanAdministration  // connects customer and book and saves booklending history
  - Loan                // tracks loan history


*** Book 
  - ID                  // in order to make a new second instance of a book, quickly but with a new GUID, how would you do that?

*** Catalog             
  - Loads all books from JSON

*** People
- Author is only connected to Book
- Librarian has access to all functionalities including: can view all Customer profiles, make backup, load backup


 Many PublicLibraries
 Library can have only one catalog
 Catalog stores information about books -> books.json
 LoanAdministrattion - which manages loan of books  -> loan-admin.json
 Users - which are customers/operators of library -> users.json

Backup has methods to backup books/users/loanAdm  - one methods that executes three submethods 

        PublicLibrary 
            - Catalog
            - LoadAdministration
            - Users




To Do 
[X] *.sln file on the root folder
[?] src folder in root folder for individual projects
[?] tst folder for unit test projects
[X?] .vs should be ignored in gitignore
[X] change default enum
[?] move enum definitions outside of Person class (one item per class)
[?] flagged enum in person in case person is librarian and author   https://docs.microsoft.com/en-us/dotnet/api/system.flagsattribute?view=netframework-4.8
[X] protected virtual _MakeUsername
[X] SearchBookByAuthor return Books.Where(c => c.AuthorName.Contains(name)).ToList(); ToList creates a new list, so won't damage list from catalog
[X] Make Books private
[X] Make BookBuilder class
[X] fix comment public List<Book> SearchBookByName( string title)
[?] CatalogLoader or CatalogBuilder entity.
[X] Make Catalog singleton or static
[X] Look up how Linq works
[X] Return linq results instead of creating new instances i.e. SearchByAuthor etc
[X] Move all methods to catalogV2
[X] Remove catalogv1 
[X] Clean up ICatalog from properties ( only methods to be there )
[X] expand constants with filepaths 
[X] make timestamp
[X] serialize Books into json file
[X] create json file in folder backups

[X] Backup - CreateNew ( try to be clear about naming conve)
[ ] Backup - ShowBackups ( ListBackups) - show name of a file and its time of creation and path ( full ) 
-------------------------- # Milestone # --------------------------

[ ] Create basic menu 
[ ] App should load data
[ ] User should be able to execute methods from the catalog

[ ] GetHashCode();=>ISBN 


[@] Backup - Restore works
[@] Backup - Deletebackup
[X] GetBookList in catalog
[X] SetBookList in catalog
[X] write down differences singleton class static class             http://net-informations.com/faq/netfaq/singlestatic.htm
    Static class:                                       Singletong Pattern:
    - Only allows static methods                        - Allows all kinds of methods
    - Cannot by itself be passed as a param             - Can be passed as a param
    - Does not allow to inherit from interface          - Allows inheritance
    - Cannot be handled polymorphically;not acc to OOP  - Can be handled polymorphically; acc to OOP
    - Stored in stack                                   - Stored in Heap
    - No constructor                                    - Can have constructor
    - Does not allow disposal                           - Does allow disposal   
    - Does not allow cloning                            - Does allow cloning 
    




